#!/usr/bin/python
import os,sys
import getopt

def main():
    """
Install DiFX

Usage:
    install-difx [-fh] [--force] [--help] [--noinstall] [--reconf] 

Builds and installs mpifxcorr and associated tools.

By default install-difx will stop if any errors are encountered (e.g. if
something fails to build).

For the standard libraries and applications, install-difx will try to autoreconf
first. Only if this fails will the application be configured step by step.

Options:
-f --force         Carry on regardless of any errors (all failed commands will
                   be listed at the end.

-h --help          Display this help message and quit.

   --noinstall     Don't install, only build.

   --reconf        Don't run autoreconf but reconfigure step by step.
    """
    pass

###############################################################################
# Parse command line options and arguments
# When adding an option or argument
#  * Make sure a default is set
#  * Make sure it is documented in main.__doc__
###############################################################################
try:
    opts, args = getopt.gnu_getopt(sys.argv[1:], "fh", ["help", "force", "reconf", "noinstall"])
except getopt.GetoptError, err:
    print err
    print main.__doc__
    sys.exit(2)

if not 0 <= len(args) <= 0:
    print "Error: Wrong number of Arguments"
    print main.__doc__
    sys.exit(2)

# set defaults
force = False
reconf = False
noinstall = False

# read arguments

# read options
if len(opts) > 0:
    for o, a in opts:
        if o in ("-h", "--help"):
            print main.__doc__
            sys.exit(2)
        if o in ("-f", "--force"):
            force = True
        if o == "--reconf":
            reconf = True
        if o == "--noinstall":
            noinstall = True


###### Targets ##########################################

libtargets = [["difxio",     "trunk",True,True],
              ["difxmessage","trunk",True,True],
              ["mark5access","trunk",True,True]]
apptargets = [["calcserver", "trunk",True,False],
              ["difx2fits",  "trunk",False,True],
              ["vex2difx",   "trunk",True,True],
              ["mk5daemon", "trunk",False,True]]
cortarget  = "trunk"

###### Subroutine to run a command and raise error if  
###### command doesn't return 0.
if force:
    errors = []

def run(cmd):
    if os.system(cmd):
        if force:
            errors.append(os.getcwd() + ' ' + cmd + " failed.")
        else:
            raise RuntimeError, "Error running " + cmd + " in " + os.getcwd()

###### Subroutine to do the compiling of an auto-tool ###
def auto_compile(dolibtoolize, doautoheader, prefix):
    if reconf or os.system("autoreconf"):
        print "reconfiguring"
        run("aclocal")
        if dolibtoolize:
            run("libtoolize --copy --force")
        run("autoconf")
        if doautoheader:
            run("autoheader")
        run("automake -a")
        run("./configure --prefix=" + difxroot)
    run("make")
    if not noinstall:
        run("make install")

###### Get all relevant environment variables ###########
print "************************************"
print "Getting environmental variables"
print
difxroot = os.environ.get('DIFXROOT')
if not difxroot:
    raise RuntimeError, "DIFXROOT must be defined"
bindir = difxroot + '/bin/'
libdir = difxroot + '/lib/'
pkgdir = difxroot + '/lib/pkg-config/'
incdir = difxroot + '/include/'
ipproot = os.environ.get('IPPROOT')
mpicxx = os.environ.get('MPICXX')
pgplotdir = os.environ.get('PGPLOTDIR')
difxbits = os.environ.get('DIFXBITS')

##### Check that appropriate setup has been done ########
if os.environ.get('DIFX_VERSION') == "":
    print "You must have already source'd setup.difx.bash!"
    print "DIFX_VERSION was undefined - aborting compilation"
    raise RuntimeError

##### Make directories if required ######################
if not noinstall:
    print "************************************"
    print "Setting up directories"
    print
    if os.path.exists(difxroot):
        print difxroot + " already exists"
        if os.path.exists(bindir):
            print bindir + " already exists"
        else:
            os.mkdir(bindir)
        if os.path.exists(libdir):
            print libdir + " already exists"
        else:
            os.mkdir(libdir)
        if os.path.exists(pkgdir):
            print pkgdir + " already exists"
        else:
            os.mkdir(pkgdir)
        if os.path.exists(incdir):
            print incdir + " already exists"
        else:
            os.mkdir(incdir)
    else:
        os.mkdir(difxroot)
        os.mkdir(bindir)
        os.mkdir(libdir)
        os.mkdir(pkgdir)
        os.mkdir(incdir)

##### Compile non-standard libraries ####################
print "************************************"
print "Building vex"
print
os.chdir("../libraries/vex/trunk/vexlib")
run("make")
if not noinstall:
    run("mv -f libvex.so " + libdir)
    run("mv -f libvex.a " + libdir)
os.chdir("../vexperl")
run("perl Makefile.PL PREFIX=" + libdir)
run("make")
if not noinstall:
    run("make install")
os.chdir("../../../../")

print "************************************"
print "Building rpfits"
print
if difxbits == "32":
    os.chdir("libraries/rpfits/trunk/linux/")
else:
    os.chdir("libraries/rpfits/trunk/linux64/")
run("make")
if not noinstall:
    run("mv -f librpfits.a " + libdir)
os.chdir("../../../..")
if not noinstall:
    run("cp -f libraries/rpfits/trunk/code/RPFITS.h " + incdir)

##### Make standard (autotool'd) libraries ###############
os.chdir("libraries")
for libtarget in libtargets:
    print "************************************"
    print "Building ", libtarget[0]
    print
    os.chdir(libtarget[0] + '/' + libtarget[1])
    auto_compile(libtarget[2], libtarget[3], difxroot)
    os.chdir("../../")
os.chdir("../")

##### Make standard (autotool'd) applications ############
os.chdir("applications")
for apptarget in apptargets:
    print "************************************"
    print "Building ", apptarget[0]
    print
    os.chdir(apptarget[0] + '/' + apptarget[1])
    auto_compile(apptarget[2], apptarget[3], difxroot)
    os.chdir("../../")
os.chdir("../")

##### Make mpifxcorr #####################################
print
print "Making mpifxcorr"
os.chdir("mpifxcorr/" + cortarget)

run("aclocal")
run("autoconf")
run("autoheader")
run("automake")
run("./configure CXX=" + mpicxx + " --prefix=" + difxroot)
run("make")
if not noinstall:
    run("make install")
    run("cp -f src/*.h " + incdir)
os.chdir("../")

if not errors == []:
    print "************************************"
    print "WARNING: Errors were encountered during installation"
    print
    for error in errors:
        print error
else:
    print "Done!"
