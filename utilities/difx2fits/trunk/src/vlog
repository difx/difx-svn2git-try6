#!/usr/bin/env python

from sys import argv, stdout, exit
from string import split, strip, find

program = 'vlog'
version = 1.0
verdate = '20071231'
author  = 'Walter Brisken'

def usage():
	print '\n%s ver. %s   %s %s\n' % (program, version, verdate, author)
	print 'A program to preprocess the cal files to simiplfy difx2fits.\n'
	print 'Usage: %s <TSM file> [<antenna list>]\n' % (argv[0])
	print '  <TSM file> is <project>cal.vlba'
	print '  <antenna list> is a comma separated list of antennas with'
	print '          no spaces, e.g., FD,GB,Y\n'
	exit(0)

def getlist(sections, header):
	s = split(header)
	sec = s[2]
	ant = s[-2]
	if not sections.has_key(sec):
		sections[sec] = {}
	S = sections[sec]
	S[ant] = []
	return S[ant]

def chop(filename):
	sections = {}
	current = []
	for D in open(filename, "r").readlines():
		d = strip(D)
		if find(d, ' -----') > 0:
			current = getlist(sections, d)
		elif len(d) > 0:
			current.append(d)
	return sections

def parsetime(str):
	s = split(str, '-')
	t = split(s[1], ':')
	return int(s[0]) + float(t[0])/24.0 + float(t[1])/1440.0 + \
		float(t[2])/86400.0

def makeWX(sections, antenna):
	if not sections.has_key('Weather'):
		return None
	if not sections['Weather'].has_key(antenna):
		return None
	W = sections['Weather'][antenna]
	table = []
	for w in W:
		if w[0] in ['*', '!']:
			continue
		s = split(w)
		if len(s) < 8:
			continue
		t = parsetime(s[0])
		table.append('%9.7f %s %s %s %s %s %s' % \
			(t, s[1], s[2], s[3], s[4], s[5], s[7]))
	return table

def getReasonRanges(reason, bbc):
	# bbc contains:  [[polid, bandid, bbc#, sb, polnum]]
	s = split(reason[1:-1])
	bad = []
	if s[0] == 'channel' and s[2] == 'bbc':
		chan = int(s[1])
		for b in bbc:
			if chan == b[2]:
				bad.append([b[4], b[1]])
	return bad

def makeFG(sections, BBCs, antenna):
	if not sections.has_key('Edit'):
		return None
	if not sections['Edit'].has_key(antenna):
		return None
	bbc = BBCs[antenna]
	F = sections['Edit'][antenna]
	flags = []
	key = "ant_name='%s'" % antenna
	for f in F:
		s = split(f)
		if s[0] == key:
			t = split(split(s[1], '=')[1], ',')
			t1 = parsetime('%s-%s:%s:%s' % (t[0], t[1], t[2], t[3]))
			t2 = parsetime('%s-%s:%s:%s' % (t[4], t[5], t[6], t[7]))
			p = find(f, 'reason=')
			p1 = p+9
			p2 = p1 + find(f[p1:], "'")
			reason = f[p1-2:p2+1]
			bad = getReasonRanges(reason, bbc)
			if bad == []:
				bad = [[-1, -1]]
			for b in bad:
				flags.append('%9.7f %9.7f %d %d %s' % (t1, t2, b[0], b[1], reason))
	return flags

def getTones(data):
	tones = {}
	polct = {}
	bandno = {}
	pols = []
	nt = 1
	nb = 1
	for d in data:
		if d[1] == 'T':
			info = []
			s = split(d)
			chanpol = s[1]+s[2]+s[3]
			chan = int(s[1])
			pol = s[3][1]
			if not pol in pols:
				pols.append(pol)
			polnum = pols.index(pol)+1
			if not bandno.has_key(chanpol):
				if polct.has_key(pol):
					polct[pol] += 1
					if polct[pol] > nb:
						nb = polct[pol]
				else:
					polct[pol] = 1
				bandno[chanpol] = [polct[pol], 1]
			else:
				bandno[chanpol][1] += 1
				if bandno[chanpol][1] > nt:
					nt = bandno[chanpol][1]
			bandnum = bandno[chanpol][0]
			tonenum = bandno[chanpol][1]
			info.append(chan)
			info.append(pol)
			info.append(s[4])
			info.append(int(s[5]))
			info.append(s[6])
			info.append(s[7])
			info.append(tonenum)
			info.append(bandnum)
			info.append(polnum)
			tones[s[0]] = info
	return tones, nt, nb, len(pols)


def makeScans(scanlist):
	scans = []
	for S in scanlist:
		if S[0] == '!':
			continue;
		s = split(S)
		scans.append([s[0], parsetime(s[1]), parsetime(s[2])])
	return scans

def getSource(scanlist, time):
	for s in scanlist:
		if time >= s[1] and time <= s[2]:
			return s[0]
	return 'None'

def countTones(ToneTable, StateTable):
	# [chan, sb, pol, freq; polnum, bandnum, tonenum]
	polList  = []
	bandnums = {}
	polCount = {}
	nTone  = 1
	nBand  = 1
	nPol   = 0
	nState = 0
	keys = ToneTable.keys()
	keys.sort()
	for key in keys:
		T = ToneTable[key]
		pol = T[2]
		chanpol = T[0]+T[1]+T[2]
		chan = T[0]
		if not pol in polList:
			polList.append(pol)
			nPol += 1
		polnum = polList.index(pol)
		if chanpol in bandnums:
			bandnums[chanpol][1] += 1
			if bandnums[chanpol][1]+1 > nTone:
				nTone = bandnums[chanpol][1]+1
		else:
			if pol in polCount:
				polCount[pol] += 1
				if polCount[pol]+1 > nBand:
					nBand = polCount[pol]+1
			else:
				polCount[pol] = 0
			bandnums[chanpol] = [polCount[pol], 0]
		T.append(polList.index(pol))	# polnum
		T.append(bandnums[chanpol][0])	# bandnum
		T.append(bandnums[chanpol][1])	# tonenum

	# [chan, sb, pol, nState; polnum, bandnum]
	keys = StateTable.keys()
	for key in keys:
		S = StateTable[key]
		if S[3] > nState:
			nState = S[3]
		pol = S[2]
		chanpol = S[0]+S[1]+S[2]
		S.append(polList.index(pol))	# polnum
		S.append(bandnums[chanpol][0])	# bandnum

	return nPol, nBand, nTone, nState

def makePH(sections, antenna):
	if not sections.has_key('PulseCal'):
		return None
	if not sections['PulseCal'].has_key(antenna):
		return None
	PulseCalData = sections['PulseCal'][antenna]
	
	PH = []
	PH.append('# Ant D.O.Y. dur(days) C.Cal nPol nBand nTone nState (freq, re, im)[nPol*nBand*nTone] (state count)[nPol*nBand*nState]')

	action = 0	# 0 == nothing
			# 1 = ToneTable
			# 2 = pulsecal data
			# 3 = write row

			# [bandnum, polnum, tonenum] are zero-based
	ToneTable = {}	# [chan, sb, pol, freq; polnum, bandnum, tonenum]
	StateTable = {}	# [chan, sb, pol, nState; polnum, bandnum]
	ToneData = []
	StateData = []
	lastKey = None

	for row in PulseCalData:
		if row[0] == '!':
			continue
		s = split(row)
		if len(s) == 0:
			continue

		if s[0] == '/' and action == 1:	# process ToneTable
			nPol, nBand, nTone, nState = \
				countTones(ToneTable, StateTable)
		elif s[0] == 'FREQUENCY':  # start (re)population of ToneTable
			action = 1
			ToneTable = {}
			StateTable = {}
		elif s[0] == 'PULSE-CAL':  # start data row(s)
			action = 2
		elif action == 1 and len(s) == 8:
			key = s[0][1:-1]
			if s[2] == "'U'" or s[2] == "'L'":
				if float(s[4]) < 1.0:
					StateTable[key] = [ \
						s[1], s[2][1:-1], \
						s[3][1:-1], 1 << int(s[5])]
				else:
					ToneTable[key] = [ \
						s[1], s[2][1:-1], \
						s[3][1:-1], s[4]]
				lastKey = key
		elif action == 2 and len(s) >= 4:
			key = s[2][1:-1]
			if key == lastKey:
				action = 3
			if key == 'CC':
				ToneData = [['', '', '']]*(nPol*nBand*nTone)
				StateData = ['']*(nPol*nBand*nState)
				t = parsetime(s[0]+'-'+s[1])
				ccal = s[3]
				if ccal == '-Inf' or ccal == 'Inf':
					ccal = '999.9'
				dt = float(s[4])/86400.0
			elif key in ToneTable:
				T = ToneTable[key]
				pol  = T[4]
				band = T[5]
				tone = T[6]
				index = tone + nTone*(band + nBand*pol)
				ToneData[index] = [T[3], s[3], s[4]]
			elif key in StateTable:
				S = StateTable[key]
				pol  = S[4]
				band = S[5]
				for state in range(S[3]):
					index = state+nState*(band + nBand*pol)
					StateData[index] = s[3+state]
		if action == 3:
			line = '%10.7f %9.7f %s %d %d %d %d' % \
				(t, dt, ccal, nPol, nBand, nTone, nState)
			for T in ToneData:
				line += (' %s %s %s' % (T[0], T[1], T[2]))
			for S in StateData:
				line += (' ' + S)
			PH.append(line)
			action = 2
	return PH


def OldmakePC(sections, antenna):
	if not sections.has_key('PulseCal'):
		return None
	if not sections['PulseCal'].has_key(antenna):
		return None
	P = sections['PulseCal'][antenna]
	Scans = makeScans(sections['Scan'][antenna])
		
	p = 0
	while P[p] != '/':
		p += 1

	tones, nt, nb, np = getTones(P[:p])

	table = []

	dt = 0;

	A = [[[]]]
	for row in P:
		s = split(row)
		if s[0] == '!':
			continue
		if len(s) != 5:
			continue
		if s[2] == "'CC'":
			current = []
			Time = parsetime(s[0]+'-'+s[1])
			current.append(Time)
			dt = float(s[4])/86400.0
			current.append(dt)
			if s[3] == '-Inf' or s[3] == 'Inf':
				s[3] = '999.9'
			current.append(s[3])
			A = []
			for x in range(np):
				A.append([])
				for y in range(nb):
					A[x].append([])
					for z in range(nt):	
						A[x][y].append(['0','0','0'])
			current.append(A)
			table.append(current)
		else:
			row = tones[s[2]]
			A[row[8]-1][row[7]-1][row[6]-1] = [row[2], s[3], s[4]]
	
	pc = []
	pc.append('# %d %d %d' % (nt, nb, np))
	for t in table:
		line = '%9.7f %9.7f %s ' % (t[0], t[1], t[2])
		for z in range(np):
			for y in range(nb):
				for x in range(nt):
					line += '%s %s %s ' % ( \
						t[3][z][y][x][0],
						t[3][z][y][x][1],
						t[3][z][y][x][2])
		pc.append(line)
	return pc

def makeTY(sections, antenna):
	if not sections.has_key('Tsys'):
		return None, None
	if not sections['Tsys'].has_key(antenna):
		return None, None
	T = sections['Tsys'][antenna]
	bbctable = []
	numpols = 0
	l = len(T)
	if l > 50:
		l = 50
	pols = {}
	for i in range(l):
		s = split(T[i])
		if len(s) != 11:
			continue;
		pol = s[4]
		sb = s[6]
		if s[0] == '!' and s[3] in ['A','B','C','D'] and pol in ['RCP', 'LCP'] and sb in ['U', 'L']:
			if pols.has_key(pol):
				pols[pol][0] += 1
			else:
				numpols += 1
				pols[pol] = [1, numpols]
			bbctable.append([pol, pols[pol][0], int(s[5]), s[6], pols[pol][1]]) # polid, bandid, bbc#, sb, polnum

	name = 'None'
	nif = len(bbctable)
	npol = len(pols)

	map = []
	for b in range(nif):
		for p in pols:
			for rn in range(len(bbctable)):
				if b+1 == bbctable[rn][1] and p == bbctable[rn][0]:
					map.append(rn)
	
	table = []

	for t in T:
		s = split(t)
		if len(s) == 5:
			n = split(s[3], '/')
			if len(n) != 2:
				print 'Cannot handle %s\n' % t
				continue
			name = n[0]
			ta = split(s[4], '/')
			dt = parsetime(ta[1])-parsetime(ta[0])
		elif len(s) == nif+4:
			if s[nif+2] != '!':
				continue
			row = '%10.7f %9.7f' % (parsetime(s[0]+'-'+s[1]+':0'), dt)
			for i in range(nif):
				row += ' '
				row += s[2+map[i]]
			table.append(row)

	return table, bbctable

def writetable(table, filename, ants, tablename):
	f = open(filename, 'w')
	stdout.write('%s:' % tablename)
	for a in ants:
		if table.has_key(a):
			t = table[a]
			stdout.write(' %s' % a)
			for row in t:
				if row[0] == '#':
					f.write('%s\n' % row)
				else:
					f.write('%s %s\n' % (a, row))
	f.close()
	stdout.write('\n')

def findantennas(sections):
	ants = []
	for s in sections:
		for a in sections[s].keys():
			if not a in ants:
				ants.append(a)
	ants.sort()
	return ants

# -- main() -----------------

if len(argv) < 2:
	usage()

sections = chop(argv[1])

if len(argv) > 2:
	ants = split(argv[2], ',')
else:
	ants = findantennas(sections)

print 'processing antennas : ', ants

BBCs = {}
TYs  = {}
PHs  = {}
WXs  = {}
FGs  = {}
for a in ants:
	ty, bbc = makeTY(sections, a)
	if ty != None:
		BBCs[a] = bbc
		TYs[a] = ty
	ph = makePH(sections, a)
	if ph != None:
		PHs[a] = ph
	wx = makeWX(sections, a)
	if wx != None:
		WXs[a] = wx

for a in ants:
	if BBCs.has_key(a):
		fg = makeFG(sections, BBCs, a)
		if fg == None:
			continue
		FGs[a] = fg

writetable(FGs, 'flag', ants, 'FG')
writetable(TYs, 'tsys', ants, 'TY')
writetable(WXs, 'weather', ants, 'WX')
writetable(PHs, 'pcal', ants, 'PH')

