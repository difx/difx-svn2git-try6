#!/usr/bin/python
import os,sys

libtargets = [["difxio",     "trunk",True,True],
              ["difxmessage","trunk",True,True],
              ["mark5access","trunk",True,True]]
apptargets = [["calcserver", "trunk",True,False],
              ["difx2fits",  "trunk",False,True],
              ["vex2difx",   "trunk",True,True],
              ["mk5daemon", "trunk",False,True]]
cortarget  = "trunk"

###### Subroutine to do the compiling of an auto-tool ###
def auto_compile(dolibtoolize, doautoheader, prefix):
    os.system("aclocal")
    if dolibtoolize:
        os.system("libtoolize --copy --force")
    os.system("autoconf")
    if doautoheader:
    	os.system("autoheader")
    os.system("automake -a")
    os.system("./configure --prefix=" + difxroot)
    os.system("make")
    os.system("make install")

###### Get all relevant environment variables ###########
difxroot = os.environ.get('DIFXROOT')
bindir = difxroot + '/bin/'
libdir = difxroot + '/lib/'
pkgdir = difxroot + '/lib/pkg-config/'
incdir = difxroot + '/include/'
ipproot = os.environ.get('IPPROOT')
mpicxx = os.environ.get('MPICXX')
pgplotdir = os.environ.get('PGPLOTDIR')
difxbits = os.environ.get('DIFXBITS')

##### Check that appropriate setup has been done ########
if os.environ.get('DIFX_VERSION') == "":
    print "You must have already source'd setup.difx.bash!"
    print "DIFX_VERSION was undefined - aborting compilation"
    sys.exit(1)

##### Make directories if required ######################
if os.path.exists(difxroot):
    print difxroot + " already exists"
    if os.path.exists(bindir):
        print bindir + " already exists"
    else:
        os.mkdir(bindir)
    if os.path.exists(libdir):
        print libdir + " already exists"
    else:
        os.mkdir(libdir)
    if os.path.exists(pkgdir):
        print pkgdir + " already exists"
    else:
        os.mkdir(pkgdir)
    if os.path.exists(incdir):
        print incdir + " already exists"
    else:
        os.mkdir(incdir)
else:
    os.mkdir(difxroot)
    os.mkdir(bindir)
    os.mkdir(libdir)
    os.mkdir(pkgdir)
    os.mkdir(incdir)

##### Compile non-standard libraries ####################
print "Making vex"
os.chdir("libraries/vex/trunk/vexlib")
os.system("make")
os.system("mv -f libvex.so " + libdir)
os.system("mv -f libvex.a " + libdir)
os.chdir("../vexperl")
os.system("perl Makefile.PL PREFIX=" + libdir)
os.system("make")
os.system("make install")
os.chdir("../../../../")

print "Making rpfits"
if difxbits == "32":
    os.chdir("libraries/rpfits/trunk/linux/")
else:
    os.chdir("libraries/rpfits/trunk/linux64/")
os.system("make")
os.system("mv -f librpfits.a " + libdir)
os.chdir("../../../..")
os.system("cp -f libraries/rpfits/trunk/code/RPFITS.h " + incdir)

##### Make standard (autotool'd) libraries ###############
os.chdir("libraries")
for libtarget in libtargets:
    print "************************************"
    print "Building ", libtarget[0]
    print
    os.chdir(libtarget[0] + '/' + libtarget[1])
    auto_compile(libtarget[2], libtarget[3], difxroot)
    os.chdir("../../")
os.chdir("../")

##### Make standard (autotool'd) applications ############
os.chdir("applications")
for apptarget in apptargets:
    os.chdir(apptarget[0] + '/' + apptarget[1])
    auto_compile(apptarget[2], apptarget[3], difxroot)
    os.chdir("../../")
os.chdir("../")

##### Make mpifxcorr #####################################
print "Making mpifxcorr"
os.chdir("mpifxcorr/" + cortarget)
os.system("aclocal")
os.system("autoconf")
os.system("autoheader")
os.system("automake")
os.system("./configure CXX=" + mpicxx + " --prefix=" + difxroot)
os.system("make")
os.system("make install")
os.system("cp -f src/*.h " + incdir)
os.chdir("../")

print "Done!"
