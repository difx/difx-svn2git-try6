#!/usr/bin/env python

#===========================================================================
# SVN properties (DO NOT CHANGE)
#
# $Id$
# $HeadURL: $
# $LastChangedRevision$
# $Author$
# $LastChangedDate$
#
#============================================================================

from string import split, strip, find, upper, lower
from sys import argv, exit
from os import popen, getenv
from glob import glob
import socket
import struct
from xml.parsers import expat
from copy import deepcopy
from time import asctime

program = 'errormon'
author  = 'Walter Brisken'
version = '0.5'
verdate = '20120516'

alertLevels = ['FATAL', 'SEVERE', 'ERROR', 'WARNING', 'INFO', 'VERBOSE', 'DEBUG', 'IGNORE']

class Parser:

    def __init__(self):
        self._parser = expat.ParserCreate()
        self._parser.StartElementHandler = self.start
        self._parser.EndElementHandler = self.end
        self._parser.CharacterDataHandler = self.data
	self.message = ''
	self.severity = -1
	self.tmp = ''
	self.ok = False
	self.unit = ''
	self.mpiid = -1
	self.id = ''
	self.tag = ''

    def feed(self, data):
        self._parser.Parse(data, 0)

    def close(self):
        self._parser.Parse("", 1) # end of data
        del self._parser # get rid of circular references

    def start(self, tag, attrs):
        self.tag = tag
        self.tmp = ''
        if tag == 'difxAlert':
                self.ok = True

    def end(self, tag):
        if tag == 'alertMessage' and self.ok:
		self.message = self.tmp
	elif tag == 'severity':
		self.severity = int(self.tmp)
	elif tag == 'from':
		self.unit = lower(self.tmp)
	elif tag == 'identifier':
		self.id = self.tmp
	elif tag == 'mpiProcessId':
		self.mpiid = int(self.tmp)

    def data(self, data):
        if self.tag == 'alertMessage':
            self.tmp = self.tmp + data	
        else:
            self.tmp = data

    def getinfo(self):
	if self.ok:
        	return 'MPI[%2d] %-9s %-12s %-7s %s' % (self.mpiid, self.unit, self.id, alertLevels[self.severity], self.message)
	else:
		return ''

def run(maxlevel):
	
	port = getenv('DIFX_MESSAGE_PORT')
	if port == None:
		print 'DIFX_MESSAGE_PORT needs to be defined'
		exit(0)
	else:
		port = int(port)
	group = getenv('DIFX_MESSAGE_GROUP')
	if group == None:
		print 'DIFX_MESSAGE_GROUP needs to be defined'
		exit(0)

	s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM)
	s.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)
	s.bind(('', port))
	mreq = struct.pack("4sl", socket.inet_aton(group), socket.INADDR_ANY)
	s.setsockopt(socket.IPPROTO_IP, socket.IP_ADD_MEMBERSHIP, mreq)
	#s.settimeout(dt)

	try:
		while 1:
			try:
			    message = s.recv(1500)
			    if len(message) > 0 and message[0] == '<':
				p = Parser()
				p.feed(message)
				info = p.getinfo()
				p.close()
				if len(info) > 0 and p.severity <= maxlevel:
					print asctime(), info
			except socket.timeout:
				pass
			except expat.ExpatError:
				print asctime(), '*** Unparsable message received ***'
				print message
	except KeyboardInterrupt:
		pass

if len(argv) > 1:
	maxlevel = int(argv[1])
else:
	maxlevel = 8

run(maxlevel)
