#!/usr/bin/env python

import datetime
import cx_Oracle
import psycopg2
from sys import argv, exit, stdout
from string import find, upper, lower, strip, split
from os import getenv, environ, popen, umask, getcwd, system



# Name of the Oracle VLBA legacy database
databaseName = getenv("VLBA_DB")

# Name of the Postgres VLBA database based on EVLA
newDatabaseName = getenv("VLBAMPTS_DB")

newDb = psycopg2.connect(newDatabaseName)

db = cx_Oracle.connect(databaseName)

mjd0 = datetime.datetime(1858, 11, 17, 0, 0)

def zero2oh(str):
	return str.replace('O', '0')

def vexPeek(vexFile, verbose):
	
	cmd = 'vexpeek %s' % vexFile
	if verbose > 0:
		print 'Executing command: %s' % cmd

	p = popen(cmd)
	data = p.readlines()

	if len(data) == 0:
		return 'Error', 'Error', 'Error'
	
	obsCode = upper(strip(data[0]))
	obsSeg = ''

	if obsCode[0:5] == 'ERROR':
		return 'Error', 'Error', 'Error'

	if len(obsCode) > 3:
		if obsCode[0].isalpha() and obsCode[1].isalpha() and obsCode[2].isdigit():
			for i in range(3, len(obsCode)):
				if obsCode[i].isalpha():
					obsSeg = obsCode[i:]
					obsCode = obsCode[0:i]
					break;
		if obsCode[0].isalpha() and obsCode[1].isdigit():
			for i in range(2, len(obsCode)):
				if obsCode[i].isalpha():
					obsSeg = obsCode[i:]
					obsCode = obsCode[0:i]
					break;
		

	stationTimes = {}
	for d in data[1:]:
		s = split(strip(d))
		stationTimes[upper(s[0])] = [float(s[1]), float(s[2])]

	print 'This is experiment %s %s' % (obsCode, obsSeg)

	return obsCode, obsSeg, stationTimes

def process(monData):
	vsn = ['', '']
	recvsn = ''
	recStart = -1
	recStop = -1
	recBank = -1
	active = -1	# or 0 or 1
	rate = 0

	N = len(monData)

	scans = []

	for m in monData:
		N -= 1
		action = ''
		dev = m[0]
		mpt = m[1]
		t   = m[2]
		v   = m[3]
		s   = m[4]
		if s == None:
			s = ''

		if mpt == 'VSN':
			if dev == 'BANK0':
				b = 0
			elif dev == 'BANK1':
				b = 1
			else:
				b = -1
			if b != -1:
				if active == b and s != vsn[b] and s != '':
					action = 'stop'
			vsn[b] = s
		elif mpt == 'RecordingRate':
			if v == 0 and rate > 0:
				action = 'stop'
			elif v > 0 and rate == 0 and active >= 0:
				action = 'start'
			rate = v
		elif mpt == 'RecordState':
			if v > 0 and recStart < 0 and active >= 0:
				action = 'start'
			elif v == 0 and recStart > 0:
				action = 'stop'
		elif mpt == 'ActiveBank':
			if (v == -1 or v != active) and recStart > 0:
				action = 'stop'
			active = int(v)

		if N == 0:
			action = 'stop'

		if action == 'stop' and recStart > 0:
			recStop = t
			scans.append([recStart, recStop, recvsn, recBank])
			recStart = -1
			stdout.write('>')
		elif action == 'start':
			recvsn = vsn[active]
			recStart = t
			recStop = -1
			recBank = active
			stdout.write('<')
	
	blocks = []
	lastblock = None
	for scan in scans:
		if lastblock == None:
			lastblock = [scan[0], scan[1], scan[2], scan[3]]
			blocks.append(lastblock)
		elif lastblock[2] != scan[2]:
			lastblock = [scan[0], scan[1], scan[2], scan[3]]
			blocks.append(lastblock)
		elif scan[0] - lastblock[1] > 60.0/1440.0:
			lastblock = [scan[0], scan[1], scan[2], scan[3]]
			blocks.append(lastblock)
		else:
			lastblock[1] = scan[1]

	return blocks

def queryMark5C(newDb, startMJD, stopMJD, station, verbose):
	
	cursor = newDb.cursor()
	
	stn = lower(station)
	if stn == 'y':
		stn = 'ea'
	hostlist = "'%s-mark5c-1', '%s-mark5c-2'" % (stn, stn)
	query = "select * from mcdata where hostname IN (%s) and timestamp > %10.4f and timestamp < %10.4f order by timestamp" % (hostlist, startMJD, stopMJD)
	query = "SELECT devicename,monpointname,timestamp,monpointvalue,monpointstr FROM mcdata WHERE hostname IN (%s) AND ((devicename IN ('BANK0', 'BANK1') AND monpointname='VSN') OR (devicename = 'MARK5C' AND monpointname IN ('ScanLabel', 'RecordingRate', 'ActiveBank', 'RecordState'))) AND timestamp BETWEEN %10.4f AND %10.4f ORDER BY timestamp" % (hostlist, startMJD, stopMJD)

	print 'Executing: %s', query

	cursor.execute(query)
	monData = cursor.fetchall()

	print '%d mon data points found' % len(monData)

	f = open('/tmp/%s.mon' % station, 'w')
	for m in monData:
		f.write('%s\n' % str(m))
	f.close()

	return monData
	
if len(argv) != 2:
	print 'Usage:  %s vex' % argv[0]
	exit(0)

obsCode, obsSeg, stationTimes = vexPeek(argv[1], 1)

stns = stationTimes.keys()
stns.sort()

cursor = db.cursor()

for s in stns:
	print '\nProcessing station %s' % s
	startMJD = stationTimes[s][0]
	stopMJD = stationTimes[s][1]
	monData = queryMark5C(newDb, startMJD-0.1, stopMJD+0.1, s, 1)

	blocks = process(monData)

	for b in blocks:
		if b[1] < startMJD or b[0] > stopMJD:
			continue;

		dt = mjd0 + datetime.timedelta(max(startMJD, b[0]))

		vsn = zero2oh(b[2])

		cmd = "INSERT into TAPE VALUES ('%s', '%s', '%s', to_date('%d/%02d/%02d:%02d:%02d:%02d', 'yyyy/mm/dd:hh24:mi:ss'), '%s', '%d')" % (obsCode, obsSeg, upper(s), dt.year, dt.month, dt.day, dt.hour, dt.minute, dt.second, vsn, b[3]+2)
		print cmd
		cursor.execute(cmd)

db.commit()
