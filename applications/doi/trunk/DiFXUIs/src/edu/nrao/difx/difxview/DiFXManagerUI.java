/*
 * DiFXManagerUI.java
 *
 * Created on March 3, 2008, 11:33 AM
 */
package edu.nrao.difx.difxview;


import edu.nrao.difx.difxdatamodel.*;
import edu.nrao.difx.difxcontroller.*;

/**
 *
 * @author  mguerra (NRAO)
 * @author  Helge Rottmann (MPIfR)
 * @version 1.0
 */
public class DiFXManagerUI extends javax.swing.JFrame
{

   private static final long serialVersionUID = 1;

   // Allow only one controller and data model instance
   static DiFXDataModel  mDataModel;
   static DiFXController mController;

   // Keep a copy of the current running job
   JobManagerUI mCurrentJM;

   /** Creates new form DiFXManagerUI */
   public DiFXManagerUI()
   {
      initComponents();

      // Create multi cast thread and data model
      mDataModel     = new DiFXDataModel();
      mController    = new DiFXController();
   }

   private static void serviceDataModel()
   {
      // Add code to update the resource objects
      // System.out.printf("***************** Static - DiFX Manager service data model. \n");
      if (mDataModel != null)
      {
         // Flag the resources that can not communicate
         mDataModel.determineLostResources();

         // Determine state of all queued jobs  -- done for each mark5status
         // mDataModel.determineStateOfAllJobs();
      }
      // System.out.printf("***************** Static - DiFX Manager service data model complete. \n");
   }

   private static void updateView()
   {
      // Add code to update the GUI with resource object
      //System.out.printf("***************** Static - DiFX Manager update the view. \n");
   }

   private static void readResourcesConfig(String fileToOpen)
   {
      //System.out.printf("***************** DiFX Manager read resources config file data. \n");
      if (mDataModel != null)
      {
         // read resource config data
         mDataModel.readResourcesConfig(fileToOpen);
      }
   }

   private static void readSystemConfig(String fileToOpen)
   {
      //System.out.printf("***************** DiFX Manager read resources config file data. \n");
      if (mDataModel != null)
      {
         // read resource config data
         mDataModel.readSystemConfig(fileToOpen);
      }
   }

   private static void connectToDB()
   {
      //System.out.printf("***************** DiFX Manager read resources config file data. \n");
      if (mDataModel != null)
      {
         // read resource config data
         mDataModel.setDBConnection();
      }
   }

   /** This method is called from within the constructor to
    * initialize the form.
    * WARNING: Do NOT modify this code. The content of this method is
    * always regenerated by the Form Editor.
    */
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents() {

    popupMenu = new javax.swing.JPopupMenu();
    aboutItem = new javax.swing.JMenuItem();
    resourceManagerButton = new javax.swing.JButton();
    modulesButton = new javax.swing.JButton();
    projectManagerButton = new javax.swing.JButton();
    jobManagerButton = new javax.swing.JButton();
    queueManagerButton = new javax.swing.JButton();
    closeButton = new javax.swing.JButton();

    aboutItem.setText("About");
    popupMenu.add(aboutItem);

    setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
    setTitle("NRAO DiFX Manager 2.0");
    setAlwaysOnTop(true);
    setName("DiFXManager"); // NOI18N
    setResizable(false);

    resourceManagerButton.setText("Resources");
    resourceManagerButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
    resourceManagerButton.setMaximumSize(new java.awt.Dimension(57, 19));
    resourceManagerButton.setMinimumSize(new java.awt.Dimension(57, 19));
    resourceManagerButton.setPreferredSize(new java.awt.Dimension(57, 19));
    resourceManagerButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        resourceManagerButtonActionPerformed(evt);
      }
    });

    modulesButton.setText("Units/Modules");
    modulesButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
    modulesButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        modulesButtonActionPerformed(evt);
      }
    });

    projectManagerButton.setText("Project Manager");
    projectManagerButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
    projectManagerButton.setMaximumSize(new java.awt.Dimension(57, 19));
    projectManagerButton.setMinimumSize(new java.awt.Dimension(57, 19));
    projectManagerButton.setPreferredSize(new java.awt.Dimension(57, 19));
    projectManagerButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        projectManagerButtonActionPerformed(evt);
      }
    });

    jobManagerButton.setText("Job Manager");
    jobManagerButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
    jobManagerButton.setMaximumSize(new java.awt.Dimension(57, 19));
    jobManagerButton.setMinimumSize(new java.awt.Dimension(57, 19));
    jobManagerButton.setPreferredSize(new java.awt.Dimension(57, 19));
    jobManagerButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        jobManagerButtonActionPerformed(evt);
      }
    });

    queueManagerButton.setText("Queue Manager");
    queueManagerButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
    queueManagerButton.setMaximumSize(new java.awt.Dimension(57, 19));
    queueManagerButton.setMinimumSize(new java.awt.Dimension(57, 19));
    queueManagerButton.setPreferredSize(new java.awt.Dimension(57, 19));
    queueManagerButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        queueManagerButtonActionPerformed(evt);
      }
    });

    closeButton.setText("Close and Exit");
    closeButton.setBorder(javax.swing.BorderFactory.createEtchedBorder(javax.swing.border.EtchedBorder.RAISED));
    closeButton.setMaximumSize(new java.awt.Dimension(57, 19));
    closeButton.setMinimumSize(new java.awt.Dimension(57, 19));
    closeButton.setPreferredSize(new java.awt.Dimension(57, 19));
    closeButton.addActionListener(new java.awt.event.ActionListener() {
      public void actionPerformed(java.awt.event.ActionEvent evt) {
        closeButtonActionPerformed(evt);
      }
    });

    javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
        .addContainerGap()
        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
          .addComponent(closeButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
          .addComponent(queueManagerButton, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
          .addComponent(jobManagerButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
          .addComponent(modulesButton, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
          .addComponent(resourceManagerButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE)
          .addComponent(projectManagerButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 149, Short.MAX_VALUE))
        .addContainerGap())
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
      .addGroup(layout.createSequentialGroup()
        .addContainerGap()
        .addComponent(resourceManagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(modulesButton, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(projectManagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(jobManagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(queueManagerButton, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
        .addComponent(closeButton, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents
   private void closeButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_closeButtonActionPerformed
      mController.stopController();
      System.exit(0);
}//GEN-LAST:event_closeButtonActionPerformed

    private void projectManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_projectManagerButtonActionPerformed

       // Display the GUI
       ProjectManagerUI thePM = ProjectManagerUI.instance(mDataModel, mController);
       // singleton, attach listener in the ProjectManagerUI class not here.
       // thePM.attachListenerCallback();
       thePM.setVisible(true);
       mDataModel.notifyListeners();

    }//GEN-LAST:event_projectManagerButtonActionPerformed

    private void resourceManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_resourceManagerButtonActionPerformed

       // Display the GUI
       ResourceManagerUI theRM = ResourceManagerUI.instance(mDataModel, mController);
       // singleton, attach listener in the ResourceManagerUI class not here.
       //theRM.attachListenerCallback();
       theRM.setVisible(true);
       mDataModel.notifyListeners();

    }//GEN-LAST:event_resourceManagerButtonActionPerformed

    private void jobManagerButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jobManagerButtonActionPerformed

       // Display the GUI, get current job running
       Queue queue = mDataModel.getQueue();
       if (queue != null)
       {
          Job job = queue.getCurrentJob();
          if (job != null)
          {
             String jobName = job.getObjName();
             if ( jobName.isEmpty() )
             {
                jobName = "Open a Job";
             }

             JobManagerUI theJM = new JobManagerUI(mDataModel, mController, jobName, true);
             theJM.attachListenerCallback();
             theJM.setVisible(true);
          }

          // clean up
          job = null;
       }

       // clean up
       queue = null;
    }//GEN-LAST:event_jobManagerButtonActionPerformed

    private void modulesButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_modulesButtonActionPerformed

       // Display the GUI
       ModuleManagerUI theMM = ModuleManagerUI.instance(mDataModel, mController);
       // singleton, attach listener in the ResourceManagerUI class not here.
       // theMM.attachListenerCallback();
       theMM.setVisible(true);
       mDataModel.notifyListeners();

    }//GEN-LAST:event_modulesButtonActionPerformed

    private void queueManagerButtonActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_queueManagerButtonActionPerformed
    {//GEN-HEADEREND:event_queueManagerButtonActionPerformed
       // Display the GUI
       QueueManagerUI theQM = QueueManagerUI.instance(mDataModel, mController);
       // singleton, attach listener in the QueueManagerUI class not here.
       // theQM.attachListenerCallback();
       theQM.setVisible(true);
       mDataModel.notifyListeners();

}//GEN-LAST:event_queueManagerButtonActionPerformed

   /**
    * This is the main entry point of the GUI
    * 
    * @param args the command line arguments
    */
   public static void main(String args[])
   {

      java.awt.EventQueue.invokeLater(new Runnable()
      {
         @Override
         public void run()
         {
            // create manager UI
            DiFXManagerUI view = new DiFXManagerUI();

            view.setVisible(true);
            view.setTitle(view.getTitle() + " " + DOISystemConfig.DOIVersion);

            System.out.println("***************** DiFX Manager attach listener. \n");

            // read the configuration file
             try
             {
                 readSystemConfig(DOISystemConfig.getConfigFile());
             } catch (Exception ex)
             {
                 System.err.println("ERROR: " + ex.getMessage());
                 System.exit(1);     
             }

            connectToDB();
            readResourcesConfig(DOISystemConfig.ResourcesFile);

            // attach the listener and implementation of update()...
            mDataModel.attachListener(new MessageListener()
            {
               @Override
               public void update()
               {
                  //System.out.printf("***************** DiFX Manager service data model and view. \n");
                  serviceDataModel();
                  //UpdateView();
                  //System.out.println("***************** DiFX Manager service data model and view complete. \n");
               }
            });

            // kick start the message threads....start controller
            try
            {
               mController.startController();
            }
            catch (InterruptedException ex)
            {
               // threads failed so log an error
               java.util.logging.Logger.getLogger("global").log(java.util.logging.Level.SEVERE, null, ex);
            }

            // initialize controller with model, view
            mController.initialize(mDataModel, view);

            // diplay the error UI
            MitigateErrorManagerUI theMEM = MitigateErrorManagerUI.instance( mDataModel, mController );
            theMEM.setVisible(true);

         }
      });
   }
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JMenuItem aboutItem;
  private javax.swing.JButton closeButton;
  private javax.swing.JButton jobManagerButton;
  private javax.swing.JButton modulesButton;
  private javax.swing.JPopupMenu popupMenu;
  private javax.swing.JButton projectManagerButton;
  private javax.swing.JButton queueManagerButton;
  private javax.swing.JButton resourceManagerButton;
  // End of variables declaration//GEN-END:variables
}
